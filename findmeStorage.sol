pragma solidity ^0.4.18;

contract Privacy {

  bool public locked = true;
  uint256 public constant ID = block.timestamp;
  uint8 private flattening = 10;
  uint8 private denomination = 255;
  uint16 private awkwardness = uint16(now);
  string hello = "cat";
  bytes8 public a = "who is ";
  string public f = "if you can find the secret, you are the best";
  bytes32[3] private data;

  
  function Private(bytes32[3] _data) public {
    data = _data;
  }
  
  function unlock(bytes16 _key) public {
    require(_key == bytes16(data[2]));
    locked = false;
  }
  
  function Privates(bytes32 _data) public {
    data[2] = _data;
  }
}

contract unlockYou{
    
    Privacy pri = Privacy(0xD8CAD496ECf8A7709456B54C06A917d78a4178E4);
    
    
    function unlockYou(bytes16 _key) public{
        pri.unlock(_key);
    }
}
