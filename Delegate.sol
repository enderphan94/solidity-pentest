pragma solidity ^0.6.0;

contract Delegate {

  address public owner;

  constructor(address _owner) public {
    owner = _owner;
  }

  function pwn() public {
    owner = msg.sender;
  }
}

contract Delegation {

  address public owner;
  Delegate delegate;

  constructor(address _delegateAddress) public {
    delegate = Delegate(_delegateAddress);
    owner = msg.sender;
  }

  fallback() external { //oops, it has fallback function AND the delegatecall is inside the fallback :D 
    (bool result, bytes memory data) = address(delegate).delegatecall(msg.data); // what we need to do is just trigger this fallback and send the "pwn()" function to it. 
    if (result) {
      this;
    }
  }
}

// we can use metamask to trigger the fallback function and send the data.
// if you don't see the data feature, you need to go to the setting and enable it
